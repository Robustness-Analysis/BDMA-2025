sil_k4 <- silhouette(kmeans$cluster, train_dmatrix, train_set$dataset_name)
# Create silhouette plot
plot(sil_k4, main = "K = 4 Silhouette")
# K = 5
set.seed(1)
# Run kmeans clustering
kmeans <- kmeans(train_set[,-1], centers = 5, nstart = 25)
# Extract the centroids
centroids_5 <- kmeans$centers
# Convert result of kmeans to kkca from flexclust
kcca_5 <- as.kcca(kmeans, train_set[,-1])
# Add cluster labels to the groups dataframe
groups_df$kmeans_5 <- kmeans$cluster
# Visualize the clusters
plot(fviz_cluster(kmeans, data = train_set[,-1],
geom = "point", ellipse.type = "convex",
ggtheme = theme_minimal()) + coord_fixed(ratio = 1))
# Compute silhouette coefficient for hierarchical clustering
sil_kmeans_5 <- silhouette(kmeans$cluster, train_dmatrix, train_set$dataset_name)
# Create silhouette plot
plot(sil_kmeans_5, main = "K = 5 Silhouette")
# K = 6
set.seed(1)
# Run kmeans clustering
kmeans <- kmeans(train_set[,-1], centers = 6, nstart = 25)
# Extract the centroids
centroids_6 <- kmeans$centers
# Convert result of kmeans to kkca from flexclust
kcca_6 <- as.kcca(kmeans, train_set[,-1])
# Add cluster labels to the groups dataframe
groups_df$kmeans_6 <- kmeans$cluster
# Visualize the clusters
plot(fviz_cluster(kmeans, data = train_set[,-1],
geom = "point", ellipse.type = "convex",
ggtheme = theme_minimal()) + coord_fixed(ratio = 1))
# Compute silhouette coefficient for hierarchical clustering
sil_kmeans_6 <- silhouette(kmeans$cluster, train_dmatrix, train_set$dataset_name)
# Create silhouette plot
plot(sil_kmeans_6, main = "K = 6 Silhouette")
# Save the centroids
saveRDS(centroids_4, file = "files/clustering/centroids.rds")
# Save the KCCA
saveRDS(kcca_4, file = "files/clustering/kcca.rds")
View(groups_df)
View(kcca_4)
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
pacman::p_load(caret, citation, data.table, dplyr, earth, farff, ggpubr, ggplot2, iml, knitr, rpart, tidyverse , tidyr, xtable, factoextra, proxy, dominanceanalysis, clustertend, MASS, smacof, flexclust)
# Load files
test_data <- readRDS("files/clustering/test_data.rds")
techniques <- c("rda", "rf", "C5.0", "svmRadial", "mlpML", "naive_bayes", "knn", "gcvEarth", "simpls", "JRip", "multinom") #, "bayesglm",
train_set <- readRDS("files/clustering/train_set.rds")
test_set <- readRDS("files/clustering/test_set.rds")
centroids <- readRDS("files/clustering/centroids.rds")
kcca <- readRDS("files/clustering/kcca.rds")
# Load results
results_df <- readRDS("files/results.rds")
plots <- readRDS("files/clustering/plots.rds")
groups_df <- readRDS("files/clustering/groups.rds")
# Predict cluster assignment for new dataset
kcca_assignment <- predict(kcca, newdata = test_set)
View(kcca)
View(test_set)
# Predict cluster assignment for new dataset
kcca_assignment <- predict(kcca, newdata = test_set[,-1])
# Print the cluster assignment
print(kcca_assignment)
for(i in 1:nrow(test_set)) {
# Calculate Euclidean distance between the new vector and each centroid
distances <- apply(centroids, 1, function(centroid) sqrt(sum((i - centroid)^2)))
# Determine the nearest centroid
cluster_assignment <- which.min(distances)
# Print the cluster assignment
print(cluster_assignment)
if(i != nrow(test_set)) {print("----------------")}
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots_1), value = TRUE)
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 10)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
View(plots)
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots_2), value = TRUE)
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 10)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
data <- subset(results_df, dataset_name == "breast-w" & noise == 10)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.10)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 10)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 20)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "liver-disorders" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 20)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "breast-w"
target_technique <- "JRip"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "analcatdata_authorship"
target_technique <- "JRip"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
data <- subset(results_df, dataset_name == "analcatdata_authorship" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
pacman::p_load(caret, citation, data.table, dplyr, earth, farff, ggpubr, ggplot2, iml, knitr, rpart, tidyverse , tidyr, xtable, factoextra, proxy, dominanceanalysis, clustertend, MASS, smacof, flexclust)
# Load files
test_data <- readRDS("files/clustering/test_data.rds")
techniques <- c("rda", "rf", "C5.0", "svmRadial", "mlpML", "naive_bayes", "knn", "gcvEarth", "simpls", "JRip") #, "bayesglm", , "multinom"
train_set <- readRDS("files/clustering/train_set.rds")
test_set <- readRDS("files/clustering/test_set.rds")
centroids <- readRDS("files/clustering/centroids.rds")
kcca <- readRDS("files/clustering/kcca.rds")
# Load results
results_df <- readRDS("files/results.rds")
plots <- readRDS("files/clustering/plots.rds")
groups_df <- readRDS("files/clustering/groups.rds")
# Predict cluster assignment for new dataset
kcca_assignment <- predict(kcca, newdata = test_set[,-1])
# Print the cluster assignment
print(kcca_assignment)
for(i in 1:nrow(test_set)) {
# Calculate Euclidean distance between the new vector and each centroid
distances <- apply(centroids, 1, function(centroid) sqrt(sum((i - centroid)^2)))
# Determine the nearest centroid
cluster_assignment <- which.min(distances)
# Print the cluster assignment
print(cluster_assignment)
if(i != nrow(test_set)) {print("----------------")}
}
# Loop through techniques
for(t in techniques) {
plot_name <- paste0(t, "_10")
if (plot_name %in% names(plots)) {
res <- as.data.frame(plots[[plot_name]]$data)
# Filter the data for cluster 4
res_cluster2 <- subset(res, cluster == 2)
# Calculate 1 - mean_kappa
res_cluster2$kappa_loss <- 1 - res_cluster2$mean_kappa
# Filter where 1 - kappa is less than or equal to 0.05
filtered_res <- subset(res_cluster2, kappa_loss <= 0.05)
# Get the highest value in the percentage column
if (nrow(filtered_res) > 0) {
highest_value <- max(filtered_res$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for cluster 2 is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for cluster 2.\n")
}
} else {
cat("Plot", plot_name, "not found in the list.\n")
}
}
data <- subset(results_df, dataset_name == "analcatdata_authorship" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
pacman::p_load(caret, citation, data.table, dplyr, earth, farff, ggpubr, ggplot2, iml, knitr, rpart, tidyverse , tidyr, xtable)
library(GGally) # extensión de ggplot2
library(factoextra) # visualizacion de los clusters
library(NbClust) # determinar el mejor numero de grupos
library(cluster) # medidas de evaluacion como silhouette
# Load files
datasets <- readRDS("files/datasets.rds")
method_names = readRDS("files/method_names.rds")
noise_level <- readRDS("files/noise.rds")
noise_names <- readRDS("files/noise_names.rds")
instances_names = readRDS("files/instances_names.rds")
quartiles_names = c("0", "25", "50", "75", "100")
#characteristics_df = readRDS("files/clustering/characteristics.rds")
# Load results
results_df <- readRDS("results/results_plot_d.rds")
results_df <- results_df %>% select(-accuracy, -kappa, -dataset_order, -method_order)
quartiles_df <- readRDS("results/results_plot_q.rds")
quartiles_df <- quartiles_df %>% select(-accuracy, -kappa, -dataset_order, -method_order)
meanKLC <- readRDS("results/meanKLC.rds")
meanKLC_q <- readRDS("results/meanKLC_q.rds")
# Transform the data
wide_data <- meanKLC_q %>%
unite("noise_percentage", noise, percentage, sep = "_") %>%
spread(key = noise_percentage, value = kappa_loss)
# View the transformed data
print(wide_data)
distance_matrix <- dist(wide_data, method = "euclidean")
k_list = c(3, 4, 5)
for(i in k_list) {
# Perform hierarchical clustering
hclusters <- hclust(distance_matrix, method = "ward")
# Plot dendrogram with labels
plot(hclusters, hang = -1, labels = wide_data$technique, main = "Hierarchical Grouping", xlab = "Observations", sub = NULL)
rect.hclust(hclusters, k = i, border = "red")
# Plot dendrogram without labels
plot(hclusters, hang = -1, main = "Hierarchical Grouping", xlab = "Observations", sub = NULL)
rect.hclust(hclusters, k = i, border = "red")
# Divide dendrogram into groups
groups <- cutree(hclusters, k = i)
# Compute silhouette coefficient for hierarchical clustering
sil <- silhouette(groups, dist = distance_matrix)
# Create silhouette plot
plot(sil)
}
install.packages("RWeka")
library(RWeka)
# Packages that need to be loaded
pacman::p_load(caret, iml, xtable, ggpubr, citation, dplyr, earth, lime)
version
setwd("~/github/BDMA-2025")
