#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
View(plots)
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots_2), value = TRUE)
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 10)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
data <- subset(results_df, dataset_name == "breast-w" & noise == 10)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.10)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 10)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 20)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "breast-w" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
data <- subset(results_df, dataset_name == "liver-disorders" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 20)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "breast-w"
target_technique <- "rda"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "breast-w"
target_technique <- "JRip"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
# Define targets
target_name <- "analcatdata_authorship"
target_technique <- "JRip"
# Filter data for the current dataset and method
filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise == 30)
#filtered_data <- subset(results_df, dataset_name == target_name & technique == target_technique & noise >= 10 & noise <= 30)
# Create plot
p <- ggplot(filtered_data, aes(x = percentage, y = kappa, color = factor(noise))) +
geom_point() +
geom_line(aes(group = factor(noise))) +
labs(x = "Instances", y = "Kappa", color = "Noise") +
theme_bw() +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0, 1, by = 0.1))
#facet_grid(method_order ~ dataset_order, scales = "free")
# Print plot
print(p)
#ggsave("plot.png", p, width = 20, height = 16, dpi = 600)
data <- subset(results_df, dataset_name == "analcatdata_authorship" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
pacman::p_load(caret, citation, data.table, dplyr, earth, farff, ggpubr, ggplot2, iml, knitr, rpart, tidyverse , tidyr, xtable, factoextra, proxy, dominanceanalysis, clustertend, MASS, smacof, flexclust)
# Load files
test_data <- readRDS("files/clustering/test_data.rds")
techniques <- c("rda", "rf", "C5.0", "svmRadial", "mlpML", "naive_bayes", "knn", "gcvEarth", "simpls", "JRip") #, "bayesglm", , "multinom"
train_set <- readRDS("files/clustering/train_set.rds")
test_set <- readRDS("files/clustering/test_set.rds")
centroids <- readRDS("files/clustering/centroids.rds")
kcca <- readRDS("files/clustering/kcca.rds")
# Load results
results_df <- readRDS("files/results.rds")
plots <- readRDS("files/clustering/plots.rds")
groups_df <- readRDS("files/clustering/groups.rds")
# Predict cluster assignment for new dataset
kcca_assignment <- predict(kcca, newdata = test_set[,-1])
# Print the cluster assignment
print(kcca_assignment)
for(i in 1:nrow(test_set)) {
# Calculate Euclidean distance between the new vector and each centroid
distances <- apply(centroids, 1, function(centroid) sqrt(sum((i - centroid)^2)))
# Determine the nearest centroid
cluster_assignment <- which.min(distances)
# Print the cluster assignment
print(cluster_assignment)
if(i != nrow(test_set)) {print("----------------")}
}
# Loop through techniques
for(t in techniques) {
plot_name <- paste0(t, "_10")
if (plot_name %in% names(plots)) {
res <- as.data.frame(plots[[plot_name]]$data)
# Filter the data for cluster 4
res_cluster2 <- subset(res, cluster == 2)
# Calculate 1 - mean_kappa
res_cluster2$kappa_loss <- 1 - res_cluster2$mean_kappa
# Filter where 1 - kappa is less than or equal to 0.05
filtered_res <- subset(res_cluster2, kappa_loss <= 0.05)
# Get the highest value in the percentage column
if (nrow(filtered_res) > 0) {
highest_value <- max(filtered_res$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for cluster 2 is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for cluster 2.\n")
}
} else {
cat("Plot", plot_name, "not found in the list.\n")
}
}
data <- subset(results_df, dataset_name == "analcatdata_authorship" & noise == 30)
# Calculate 1 - mean_kappa
data$kappa_loss <- 1 - data$kappa
# Loop through techniques
for(t in techniques) {
filtered_data <- subset(data, kappa_loss <= 0.15)
# Get the highest value in the percentage column
if (nrow(filtered_data) > 0) {
highest_value <- max(filtered_data$percentage)
cat("Technique:", t, "- Highest percentage where Kappa loss is 5% for breast-w is:", highest_value, "\n")
} else {
cat("Technique:", t, "- No entries where Kappa loss is 5% for breast-w .\n")
}
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_10$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_20$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
# Identify elements ending with "rf_10"
elements_to_plot <- grep("rda_30$", names(plots), value = TRUE)
# Plot the data for each of these elements using base R
for (element in elements_to_plot) {
plot_data <- plots[[element]]
plot(
plot_data,
type = "l",
main = paste("Plot of", element),
xlab = "Index",
ylab = "Value"
)
}
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
pacman::p_load(caret, citation, data.table, dplyr, earth, farff, ggpubr, ggplot2, iml, knitr, rpart, tidyverse , tidyr, xtable)
library(GGally) # extensión de ggplot2
library(factoextra) # visualizacion de los clusters
library(NbClust) # determinar el mejor numero de grupos
library(cluster) # medidas de evaluacion como silhouette
# Load files
datasets <- readRDS("files/datasets.rds")
method_names = readRDS("files/method_names.rds")
noise_level <- readRDS("files/noise.rds")
noise_names <- readRDS("files/noise_names.rds")
instances_names = readRDS("files/instances_names.rds")
quartiles_names = c("0", "25", "50", "75", "100")
#characteristics_df = readRDS("files/clustering/characteristics.rds")
# Load results
results_df <- readRDS("results/results_plot_d.rds")
results_df <- results_df %>% select(-accuracy, -kappa, -dataset_order, -method_order)
quartiles_df <- readRDS("results/results_plot_q.rds")
quartiles_df <- quartiles_df %>% select(-accuracy, -kappa, -dataset_order, -method_order)
meanKLC <- readRDS("results/meanKLC.rds")
meanKLC_q <- readRDS("results/meanKLC_q.rds")
# Transform the data
wide_data <- meanKLC_q %>%
unite("noise_percentage", noise, percentage, sep = "_") %>%
spread(key = noise_percentage, value = kappa_loss)
# View the transformed data
print(wide_data)
distance_matrix <- dist(wide_data, method = "euclidean")
k_list = c(3, 4, 5)
for(i in k_list) {
# Perform hierarchical clustering
hclusters <- hclust(distance_matrix, method = "ward")
# Plot dendrogram with labels
plot(hclusters, hang = -1, labels = wide_data$technique, main = "Hierarchical Grouping", xlab = "Observations", sub = NULL)
rect.hclust(hclusters, k = i, border = "red")
# Plot dendrogram without labels
plot(hclusters, hang = -1, main = "Hierarchical Grouping", xlab = "Observations", sub = NULL)
rect.hclust(hclusters, k = i, border = "red")
# Divide dendrogram into groups
groups <- cutree(hclusters, k = i)
# Compute silhouette coefficient for hierarchical clustering
sil <- silhouette(groups, dist = distance_matrix)
# Create silhouette plot
plot(sil)
}
install.packages("RWeka")
library(RWeka)
# Packages that need to be loaded
pacman::p_load(caret, iml, xtable, ggpubr, citation, dplyr, earth, lime)
version
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally) # extensión de ggplot2
library(factoextra) # visualizacion de los clusters
library(NbClust) # determinar el mejor numero de grupos
library(cluster) # medidas de evaluacion como silhouette
# Load files
datasets <- readRDS("../files/datasets.rds")
method_names = readRDS("../files/method_names.rds")
noise_level <- readRDS("../files/noise.rds")
noise_names <- readRDS("../files/noise_names.rds")
instances_names = readRDS("../files/instances_names.rds")
quartiles_names = c("25", "50", "75", "100")
# Load results
meanKLC <- readRDS("../results/meanKLC_d.rds") # This is df2 from Aggregate_Curves
meanKLC_q <- readRDS("../results/meanKLC_q.rds") # This is df2_q from Aggregate_Curves
# Transform the data
wide_data <- meanKLC_q %>%
unite("noise_percentage", noise, percentage, sep = "_") %>%
spread(key = noise_percentage, value = kappa_loss)
# View the transformed data
print(wide_data)
distance_matrix <- dist(wide_data, method = "euclidean")
clustering_data <- wide_data[,-1]  # Remove the technique column (need only numbers)
View(clustering_data)
knitr::opts_chunk$set(echo = TRUE)
# Packages that need to be loaded
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally) # extensión de ggplot2
library(factoextra) # visualizacion de los clusters
library(NbClust) # determinar el mejor numero de grupos
library(cluster) # medidas de evaluacion como silhouette
# Load files
datasets <- readRDS("../files/datasets.rds")
method_names = readRDS("../files/method_names.rds")
noise_level <- readRDS("../files/noise.rds")
noise_names <- readRDS("../files/noise_names.rds")
instances_names = readRDS("../files/instances_names.rds")
quartiles_names = c("25", "50", "75", "100")
# Load results
meanKLC <- readRDS("../results/meanKLC_d.rds") # This is df2 from Aggregate_Curves
meanKLC_q <- readRDS("../results/meanKLC_q.rds") # This is df2_q from Aggregate_Curves
# Transform the data
wide_data <- meanKLC_q %>%
unite("noise_percentage", noise, percentage, sep = "_") %>%
spread(key = noise_percentage, value = kappa_loss)
# View the transformed data
print(wide_data)
distance_matrix <- dist(wide_data, method = "euclidean")
clustering_data <- wide_data[,-1]  # Remove the technique column (need only numbers)
# method parameters: "silhouette", "wss", "gap_stat"
print(fviz_nbclust(clustering_data, kmeans, method = "wss") + geom_vline(xintercept = 4, linetype = 2) + labs(subtitle = "Elbow method") + theme_minimal())
library(cluster)
silhouette_scores <- sapply(2:10, function(k) {
clusters <- cutree(hclust(distance_matrix, method = "ward.D"), k = k)
mean(silhouette(clusters, distance_matrix)[,3])
})
plot(2:10, silhouette_scores, type = "b", xlab = "Number of clusters",
ylab = "Average silhouette width", main = "Silhouette Method")
optimal_k <- which.max(silhouette_scores) + 1
abline(v = optimal_k, lty = 2, col = "#FF0000")
# Check dimensions before filtering
print(dim(clustering_data))
# Remove zero-variance columns
zero_var_cols <- apply(clustering_data, 2, function(x) var(x) == 0)
clustering_data_filtered <- clustering_data[, !zero_var_cols]
print(dim(clustering_data_filtered))
# Remove near-zero variance (very small variation)
near_zero_var <- apply(clustering_data_filtered, 2, function(x) var(x) < 1e-10)
print(sum(near_zero_var))
# Check for missing values
print(sum(is.na(clustering_data_filtered)))
cor_matrix <- cor(clustering_data_filtered)
high_cor <- sum(abs(cor_matrix[upper.tri(cor_matrix)]) > 0.95)
print(paste("Number of highly correlated pairs:", high_cor))
# Run NbClust with multiple indices
set.seed(1)  # For reproducibility
nb_results <- NbClust(data = clustering_data_filtered,
distance = "euclidean",
min.nc = 2,
max.nc = 10,
method = "ward.D",
index = "all")
knitr::opts_chunk$set(echo = TRUE)
method_names = readRDS("../files/method_names.rds")
method_names
setwd("~/github/BDMA-2025")
